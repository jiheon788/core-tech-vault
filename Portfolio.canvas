{
	"nodes":[
		{"id":"5c2b8d80050f771d","type":"file","file":"JavaScript/Mutation의 개념과 활용.md","x":640,"y":-600,"width":480,"height":700},
		{"id":"e31d1d970ed7aa2a","x":-700,"y":-344,"width":485,"height":660,"type":"file","file":"assets/박지헌_Resume_250131.pdf"},
		{"id":"2a54a434b38a6be5","type":"text","text":"#  성능최적화\n\n- 가상스크롤링\n- 초기로딩속도개선\n\t- 상호작용 시 불러오기\n\t- 트리쉐이킹\n\n최적화를 통해 얻을 수 있는 이점 ? -> 더 나은 사용자 경험과 SEO -> \n좋은 사용자 경험은 무엇일까? -> 사용자가 목적을 직관적이고 빠르게 달성\n\n\n최적화 원칙\n- 조기 최적화는 지양, 모든 최적화는 트레이드오프가 따른다.\n- 가장 좋은 코드는 실행되지 않는 코드다","x":-160,"y":360,"width":625,"height":600,"color":"3"},
		{"id":"7f663221f77e8e83","x":-97,"y":-300,"width":497,"height":460,"type":"text","text":"### 이마고웍스 클라우드 프로젝트 - 코드 파편화로 인한 유지보수의 어려움을 개선하기 위해 레거시 코드 리팩토링\n상황:\n- 서버데이터와 클라이언트 데이터의 혼용\n- 한 프로젝트에서 react-query, redux, recoil, context 등 여러 상태관리 혼용\n문제:\n- \n\nReact-Query와 Recoil을 활용하여 서버 데이터와 클라이언트 상태 관리를 분리"}
	],
	"edges":[]
}